{"repository_name":"github.com/imdrasil/serializer","body":"# Serializer\n\n**Serializer** is a simple JSON serialization library for your object structure. Unlike core `JSON` module's functionality this library only covers serializing objects to JSON without parsing data back. At the same time it provides some free space for maneuvers, precise and flexible configuration WHAT, HOW and WHEN should be rendered.\n\n`Serializer::Base` only ~11% slower than `JSON::Serializable`\n\n```text\n        Serializer 646.00k (  1.55µs) (± 2.52%)  2.77kB/op   1.11× slower\nJSON::Serializable 719.74k (  1.39µs) (± 2.39%)   1.3kB/op        fastest\n```\n\nand at the same time provides next functionality:\n\n* conditional rendering at schema definition stage\n* excluding specific fields at invocation stage\n* separation fields from relations\n* deep relation specification (to be rendered) at invocation stage\n* inheritance\n* optional meta data (can be specified at both definition and invocation stages).\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     serializer:\n       github: imdrasil/serializer\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nLet's assume we have next resources relationship\n\n```crystal\nclass Parent\n  property name, title,\n    children : Array(Child),\n    friends : Array(Child)\n\n  def initialize(@name = \"test\", @title = \"asd\", @children = [] of Child, @friends = [] of Child)\n  end\nend\n\nclass Child\n  property age : Int32, dipper : Child?, address : Address?\n\n  def initialize(@age, @dipper = nil, @address = nil)\n  end\n\n  def some_sub_relation; end\nend\n\nclass Address\n  property street\n\n  def initialize(@street = \"some street\")\n  end\nend\n```\n\nTo be able to serialize data we need to define serializers for each resource:\n\n```crystal\nclass AddressSerializer < Serializer::Base(Address)\n  attributes :street\nend\n\nclass ChildSerializer < Serializer::Base(Child)\n  attribute :age\n\n  has_one :some_sub_relation, ChildSerializer\n  has_one :address, AddressSerializer\n  has_one :dipper, ChildSerializer\nend\n\nclass ModelSerializer < Serializer::Base(Model)\n  attribute :name\n  attribute :title, :Title, if: :test_title\n  attribute :own_field\n\n  has_many :children, ChildSerializer\n  has_many :friends, ChildSerializer\n\n  def test_title(object, options)\n    options.nil? || !options[:test]?\n  end\n\n  def own_field\n    12\n  end\nend\n```\n\n### Attributes\n\nTo specify what should be serialized `attributes` and `attribute` macros are used. `attributes` allows to pass a list of attribute names which maps one-to-one with JSON keys\n\n```crystal\nclass PostSerializer\n  attributes :title, body\nend\n```\n\nAbove serializer will produce next output `{\"title\": \"Some title\", \"body\": \"Post body\"}`. You can precisely configure every field using `attribute` macro. It allows to specify `key` name to be used in JSON and `if` predicate method name to be used to check whether field should be serialized.\n\n```crystal\nclass ModelSerializer < Serializer::Base(Model)\n  attribute :title, :Title, if: :test_title\n\n  def test_title(object, options)\n    options.nil? || !options[:test]?\n  end\nend\n```\n\nAbove serializer will produce next output `{\"Title\": \"Some title\"}` if serializer has got options without `test` set to `true`.\n\nIf serializer has a method with the same name as specified field - it is used.\n\n```crystal\nclass ModelSerializer < Serializer::Base(Model)\n  attribute :name\n\n  def name\n    \"StaticName\"\n  end\nend\n```\n\n### Relations\n\nIf resource has underlying resources to serialize they can be specified with `has_one`, `belongs_to` and `has_many` macro methods that describes relation type between them (one-to-one, one-to-any and one-to-many).\n\n```crystal\nclass ModelSerializer < Serializer::Base(Model)\n  has_many :friends, ChildSerializer\nend\n```\n\nThey also accepts `key` option. There is no `if` support because associations by default isn't rendered.\n\n### Meta\n\nResource meta data can be defined at it's level - overriding `.meta` method.\n\n```crystal\nclass ModelSerializer < Serializer::Base(Model)\n  def self.meta(options)\n    {\n      :page => options[:page]\n    }\n  end\nend\n```\n\nMethod return value should be `Hash(Symbol, JSON::Any::Type | Int32)`. Also any additional meta attributes may be defined at serialization moment (calling `#serialize` method).\n\n### Inheritance\n\nIf you have complicated domain object relation structure - you can easily present serialization logic using inheritance:\n\n```crystal\nclass ModelSerializer < Serializer::Base(Model)\n  attribute :name\nend\n\nclass InheritedSerializer < ModelSerializer\n  attribute :inherited_field\n\n  def inherited_field\n    1.23\n  end\nend\n```\n\n### Rendering\n\nTo render resource create an instance of required serializer and call `#serialize`:\n\n```crystal\nModelSerializer.new(model).serialize\n```\n\nIt accepts several optional arguments:\n\n* `except` - array of fields that should not be serialized;\n* `includes` - relations that should be included into serialized string;\n* `opts` - options that will be passed to *if* predicate methods and `.meta`;\n* `meta` - meta attributes to be added under `\"meta\"` key at root level; it is merged into default meta attributes returned by `.meta`.\n\n```crystal\nModelSerializer.new(model).serialize(\n  except: [:own_field],\n  includes: {\n    :children => [:some_sub_relation],\n    :friends => { :address => nil, :dipper => [:some_sub_relation] }\n  },\n  meta: { :page => 0 }\n)\n```\n\n`includes` should be array or hash (any levels deep) which elements presents relation names to be serialized. `nil` value may be used in hashes as a value to define that nothing additional should be serialized for a relation named by corresponding key.\n\nExample above results in:\n\n```json\n{\n  \"data\":{\n    \"name\":\"test\",\n    \"Title\":\"asd\",\n    \"children\":[],\n    \"friends\":[\n      {\n        \"age\":60,\n        \"address\":{\n          \"street\":\"some street\"\n        },\n        \"dipper\":{\n          \"age\":20,\n          \"some_sub_relation\":null\n        }\n      }\n    ]\n  },\n  \"meta\":{\n    \"page\":0\n  }\n}\n```\n\n> This is pretty JSON version - actual result contains no spaces and newlines.\n\n#### Root key\n\nSerialized JSON root level includes `data` key (and optional `meta` key). It can be renamed to anything by defining `.root_key`\n\n```crystal\nclass ModelSerializer < Serializer::Base(Model)\n  def self.root_key\n    \"model\"\n  end\n\n  attribute :name\nend\n```\n\nFor API details see [documentation](https://imdrasil.github.io/serializer/latest/serializer).\n\n## Contributing\n\n1. Fork it (<https://github.com/imdrasil/serializer/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Roman Kalnytskyi](https://github.com/imdrasil) - creator and maintainer\n","program":{"html_id":"github.com/imdrasil/serializer/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/imdrasil/serializer","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/imdrasil/serializer/Serializer","path":"Serializer.html","kind":"module","full_name":"Serializer","name":"Serializer","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"serizlizer/dsl.cr","line_number":1,"url":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/dsl.cr"},{"filename":"serizlizer/serializable.cr","line_number":1,"url":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/serializable.cr"},{"filename":"serizlizer/base.cr","line_number":4,"url":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/base.cr"},{"filename":"serializer.cr","line_number":4,"url":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serializer.cr"}],"repository_name":"github.com/imdrasil/serializer","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/imdrasil/serializer/Serializer/Base","path":"Serializer/Base.html","kind":"class","full_name":"Serializer::Base(T)","name":"Base","abstract":true,"superclass":{"html_id":"github.com/imdrasil/serializer/Serializer/Serializable","kind":"class","full_name":"Serializer::Serializable","name":"Serializable"},"ancestors":[{"html_id":"github.com/imdrasil/serializer/Serializer/DSL","kind":"module","full_name":"Serializer::DSL","name":"DSL"},{"html_id":"github.com/imdrasil/serializer/Serializer/Serializable","kind":"class","full_name":"Serializer::Serializable","name":"Serializable"},{"html_id":"github.com/imdrasil/serializer/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/imdrasil/serializer/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"serizlizer/base.cr","line_number":83,"url":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/base.cr"}],"repository_name":"github.com/imdrasil/serializer","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/imdrasil/serializer/Serializer/DSL","kind":"module","full_name":"Serializer::DSL","name":"DSL"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/imdrasil/serializer/Serializer","kind":"module","full_name":"Serializer","name":"Serializer"},"doc":"Base serialization superclass.\n\n```\nclass AddressSerializer < Serializer::Base(Address)\n  attributes :street\nend\n\nclass ChildSerializer < Serializer::Base(Child)\n  attribute :age\n\n  has_one :address, AddressSerializer\n  has_one :dipper, ChildSerializer\nend\n\nclass ModelSerializer < Serializer::Base(Model)\n  attribute :name\n  attribute :own_field\n\n  has_many :children, ChildSerializer\n\n  def own_field\n    12\n  end\nend\n\nModelSerializer.new(object).serialize(\n  except: [:own_field],\n  includes: {\n    :children => { :address => nil, :dipper => [:address] }\n  },\n  meta: { :page => 0 }\n)\n```\n\nExample above produces next output (this one is made to be readable -\nreal one has no newlines and indentations):\n\n```json\n{\n  \"data\":{\n    \"name\":\"test\",\n    \"children\":[\n      {\n        \"age\":60,\n        \"address\":null,\n        \"dipper\":{\n          \"age\":20,\n          \"address\":{\n            \"street\":\"some street\"\n          }\n        }\n      }\n    ]\n  },\n  \"meta\":{\n    \"page\":0\n  }\n}\n```\n\nFor a details about DSL specification or serialization API see `DSL` and `Serializable`.\n\n## Inheritance\n\nYou can DRY your serializers by inheritance - just add required attributes and/or associations in\nthe subclasses.\n\n```\nclass UserSerializer < Serializer::Base(User)\n  attributes :name, :age\nend\n\nclass FullUserSerializer < UserSerializer\n  attributes :email, :created_at\n\n  has_many :identities, IdentitySerializer\nend\n```","summary":"<p>Base serialization superclass.</p>","class_methods":[],"constructors":[{"id":"new(target:T|Array(T)?)-class-method","html_id":"new(target:T|Array(T)?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":"T | Array(T) | ::Nil"}],"args_string":"(target : T | Array(T)?)","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/base.cr#L146","def":{"name":"new","args":[{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":"T | Array(T) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Base(T).allocate\n_.initialize(target)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"serialize_attributes(object,io,except,opts)-instance-method","html_id":"serialize_attributes(object,io,except,opts)-instance-method","name":"serialize_attributes","doc":"Serializes *target*'s attributes to *io*.","summary":"<p>Serializes <em>target</em>'s attributes to <em>io</em>.</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""},{"name":"except","doc":null,"default_value":"","external_name":"except","restriction":""},{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""}],"args_string":"(object, io, except, opts)","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/base.cr#L149","def":{"name":"serialize_attributes","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""},{"name":"except","doc":null,"default_value":"","external_name":"except","restriction":""},{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"0"}},{"id":"serialize_relations(object,fields_count,io,includes,opts)-instance-method","html_id":"serialize_relations(object,fields_count,io,includes,opts)-instance-method","name":"serialize_relations","doc":"Serializes *target*'s relations to *io*.","summary":"<p>Serializes <em>target</em>'s relations to <em>io</em>.</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"fields_count","doc":null,"default_value":"","external_name":"fields_count","restriction":""},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""},{"name":"includes","doc":null,"default_value":"","external_name":"includes","restriction":""},{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""}],"args_string":"(object, fields_count, io, includes, opts)","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/base.cr#L153","def":{"name":"serialize_relations","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"fields_count","doc":null,"default_value":"","external_name":"fields_count","restriction":""},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""},{"name":"includes","doc":null,"default_value":"","external_name":"includes","restriction":""},{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"fields_count"}}],"macros":[],"types":[]},{"html_id":"github.com/imdrasil/serializer/Serializer/DSL","path":"Serializer/DSL.html","kind":"module","full_name":"Serializer::DSL","name":"DSL","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"serizlizer/dsl.cr","line_number":17,"url":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/dsl.cr"}],"repository_name":"github.com/imdrasil/serializer","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/imdrasil/serializer/Serializer/Base","kind":"class","full_name":"Serializer::Base(T)","name":"Base"}],"namespace":{"html_id":"github.com/imdrasil/serializer/Serializer","kind":"module","full_name":"Serializer","name":"Serializer"},"doc":"Contains DSL required to define required fields and relations for serialization.\n\n```\nclass UserSerializer < Serializer::Base(User)\n  attribute :name\n  attribute :first_name, \"first-name\"\n  attribute :email, if: :secure?\n\n  has_many :posts, PostSerializer\n\n  def secure?(record, options)\n    options && options[:secure]?\n  end\nend\n```","summary":"<p>Contains DSL required to define required fields and relations for serialization.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"attribute(name,key=nil,ifif_proc=nil)-macro","html_id":"attribute(name,key=nil,ifif_proc=nil)-macro","name":"attribute","doc":"Defines *name* attribute to be serialized.\n\n*name* values will be used as a method name that is called on target object. Also it can be\na serializer's own method name. In such case it is called instead.\n\nOptions:\n\n* *key* - json key; equals to *name* by default;\n* *if* - name of a method to be used to check whether attribute *name* should be serialized.\n\nMethod given to the *if* should have following signature:\n\n`abstract def method(object : T, options : Hash(Symbol, Serializer::MetaAny)?)`\n\nReturned type will be used in `if` clause.\n\n```\nclass UserSerializer < Serializer::Base(User)\n  attribute :name\n  attribute :first_name, \"first-name\"\n  attribute :email, if: :secure?\n\n  def secure?(record, options)\n    options && options[:secure]?\n  end\nend\n```","summary":"<p>Defines <em>name</em> attribute to be serialized.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""},{"name":"if_proc","doc":null,"default_value":"nil","external_name":"if","restriction":""}],"args_string":"(name, key = <span class=\"n\">nil</span>, if if_proc = <span class=\"n\">nil</span>)","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/dsl.cr#L61","def":{"name":"attribute","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""},{"name":"if_proc","doc":null,"default_value":"nil","external_name":"if","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n{% ATTRIBUTES[name] = {key: key || name, if: if_proc} %}\n\n    \n"}},{"id":"attributes(*names)-macro","html_id":"attributes(*names)-macro","name":"attributes","doc":"Defines list of attributes to be serialized from target.\n\n```\nclass UserSerializer < Serializer::Base(User)\n  attributes :name, :first_name, :email\nend\n```","summary":"<p>Defines list of attributes to be serialized from target.</p>","abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(*names)","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/dsl.cr#L25","def":{"name":"attributes","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"      \n{% names.reduce(ATTRIBUTES) do |hash, name|\n  hash[name] = {key: name, if: nil}\n  hash\nend %}\n\n    \n"}},{"id":"belongs_to(name,serializer,key=nil)-macro","html_id":"belongs_to(name,serializer,key=nil)-macro","name":"belongs_to","doc":"Defines `one-to-any` *name* association that is serialized by *serializer*.\n\nFor more details see `.has_many`.","summary":"<p>Defines <code>one-to-any</code> <em>name</em> association that is serialized by <em>serializer</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"serializer","doc":null,"default_value":"","external_name":"serializer","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""}],"args_string":"(name, serializer, key = <span class=\"n\">nil</span>)","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/dsl.cr#L95","def":{"name":"belongs_to","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"serializer","doc":null,"default_value":"","external_name":"serializer","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n{% RELATIONS[name] = {serializer: serializer, key: key || name, type: :belongs_to} %}\n\n    \n"}},{"id":"has_many(name,serializer,key=nil)-macro","html_id":"has_many(name,serializer,key=nil)-macro","name":"has_many","doc":"Defines `one-to-many` *name* association that is serialized by *serializer*.\n\nOptions:\n\n* *key* - json key; equals to *name* by default;\n* *serializer* - class to be used for association serialization.\n\n```\nclass UserSerializer < Serializer::Base(User)\n  has_many :posts, PostSerializer\n  has_many :post_comments, CommentSerializer, \"postComments\"\nend\n```\n\nBy default all associations are not serialized. To make an association being serialized\nit should be explicitly specified in *includes* argument of `Base#serialize` method.","summary":"<p>Defines <code>one-to-many</code> <em>name</em> association that is serialized by <em>serializer</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"serializer","doc":null,"default_value":"","external_name":"serializer","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""}],"args_string":"(name, serializer, key = <span class=\"n\">nil</span>)","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/dsl.cr#L81","def":{"name":"has_many","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"serializer","doc":null,"default_value":"","external_name":"serializer","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n{% RELATIONS[name] = {serializer: serializer, key: key || name, type: :has_many} %}\n\n    \n"}},{"id":"has_one(name,serializer,key=nil)-macro","html_id":"has_one(name,serializer,key=nil)-macro","name":"has_one","doc":"Defines `one-to-one` *name* association that is serialized by *serializer*.\n\nFor more details see `.has_many`.","summary":"<p>Defines <code>one-to-one</code> <em>name</em> association that is serialized by <em>serializer</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"serializer","doc":null,"default_value":"","external_name":"serializer","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""}],"args_string":"(name, serializer, key = <span class=\"n\">nil</span>)","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/dsl.cr#L88","def":{"name":"has_one","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"serializer","doc":null,"default_value":"","external_name":"serializer","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n{% RELATIONS[name] = {serializer: serializer, key: key || name, type: :has_one} %}\n\n    \n"}}],"types":[]},{"html_id":"github.com/imdrasil/serializer/Serializer/MetaAny","path":"Serializer/MetaAny.html","kind":"alias","full_name":"Serializer::MetaAny","name":"MetaAny","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"serizlizer/serializable.cr","line_number":3,"url":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/serializable.cr"}],"repository_name":"github.com/imdrasil/serializer","program":false,"enum":false,"alias":true,"aliased":"(Array(JSON::Any) | Bool | Float64 | Hash(String, JSON::Any) | Int32 | Int64 | String | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/imdrasil/serializer/Serializer","kind":"module","full_name":"Serializer","name":"Serializer"},"doc":"Allowed types for *meta* hash values.","summary":"<p>Allowed types for <em>meta</em> hash values.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/imdrasil/serializer/Serializer/Serializable","path":"Serializer/Serializable.html","kind":"class","full_name":"Serializer::Serializable","name":"Serializable","abstract":true,"superclass":{"html_id":"github.com/imdrasil/serializer/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/imdrasil/serializer/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/imdrasil/serializer/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"serizlizer/serializable.cr","line_number":6,"url":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/serializable.cr"}],"repository_name":"github.com/imdrasil/serializer","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/imdrasil/serializer/Serializer/Serializable/AbstractClassMethods","kind":"module","full_name":"Serializer::Serializable::AbstractClassMethods","name":"AbstractClassMethods"}],"subclasses":[{"html_id":"github.com/imdrasil/serializer/Serializer/Base","kind":"class","full_name":"Serializer::Base(T)","name":"Base"}],"including_types":[],"namespace":{"html_id":"github.com/imdrasil/serializer/Serializer","kind":"module","full_name":"Serializer","name":"Serializer"},"doc":"Base abstract superclass for serialization.","summary":"<p>Base abstract superclass for serialization.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"serialize(except:Array(Symbol)=[]of::Symbol,includes:Array(Symbol)|Hash=[]of::Symbol,opts:Hash?=nil,meta:Hash(Symbol,MetaAny)?=nil)-instance-method","html_id":"serialize(except:Array(Symbol)=[]of::Symbol,includes:Array(Symbol)|Hash=[]of::Symbol,opts:Hash?=nil,meta:Hash(Symbol,MetaAny)?=nil)-instance-method","name":"serialize","doc":"Generates a JSON formatted string.\n\nArguments:\n\n* *except* - array of fields should be excluded from serialization;\n* *includes* - definition of relation that should be included into serialized string;\n* *opts* - options that will be passed to methods defined for *if* attribute options and `.meta`;\n* *meta* - meta attributes to be added under `\"meta\"` key at root level; it is merge into default\nmeta attributes returned by `.meta`.\n\n```\nModelSerializer.new(object).serialize(\n  except: [:own_field],\n  includes: {\n    :children => { :address => nil, :dipper => [:address] }\n  },\n  meta: { :page => 0 }\n)\n```\n\n## Includes\n\n*includes* option accepts `Array` or `Hash` values. To define just a list of association of target object - just pass an array:\n\n```\nModelSerializer.new(object).serialize(includes: [:children])\n```\n\nYou can also specify deeper and more sophisticated schema by passing `Hash`. In this case hash values should be of\n`Array(Symbol) | Hash | Nil` type. `nil` is used to mark association which name is used for key as a leaf in schema\ntree.","summary":"<p>Generates a JSON formatted string.</p>","abstract":false,"args":[{"name":"except","doc":null,"default_value":"[] of ::Symbol","external_name":"except","restriction":"Array(Symbol)"},{"name":"includes","doc":null,"default_value":"[] of ::Symbol","external_name":"includes","restriction":"Array(Symbol) | Hash"},{"name":"opts","doc":null,"default_value":"nil","external_name":"opts","restriction":"Hash | ::Nil"},{"name":"meta","doc":null,"default_value":"nil","external_name":"meta","restriction":"Hash(Symbol, MetaAny) | ::Nil"}],"args_string":"(except : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">Symbol</span>, includes : Array(Symbol) | Hash = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">Symbol</span>, opts : Hash? = <span class=\"n\">nil</span>, meta : Hash(Symbol, MetaAny)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/serializable.cr#L86","def":{"name":"serialize","args":[{"name":"except","doc":null,"default_value":"[] of ::Symbol","external_name":"except","restriction":"Array(Symbol)"},{"name":"includes","doc":null,"default_value":"[] of ::Symbol","external_name":"includes","restriction":"Array(Symbol) | Hash"},{"name":"opts","doc":null,"default_value":"nil","external_name":"opts","restriction":"Hash | ::Nil"},{"name":"meta","doc":null,"default_value":"nil","external_name":"meta","restriction":"Hash(Symbol, MetaAny) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"String.build do |io|\n  serialize(io, except, includes, opts, meta)\nend"}},{"id":"serialize_attributes(target,io,except,opts)-instance-method","html_id":"serialize_attributes(target,io,except,opts)-instance-method","name":"serialize_attributes","doc":"Serializes *target*'s attributes to *io*.","summary":"<p>Serializes <em>target</em>'s attributes to <em>io</em>.</p>","abstract":true,"args":[{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""},{"name":"except","doc":null,"default_value":"","external_name":"except","restriction":""},{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""}],"args_string":"(target, io, except, opts)","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/serializable.cr#L50","def":{"name":"serialize_attributes","args":[{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""},{"name":"except","doc":null,"default_value":"","external_name":"except","restriction":""},{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"serialize_relations(target,fields_count,io,includes,opts)-instance-method","html_id":"serialize_relations(target,fields_count,io,includes,opts)-instance-method","name":"serialize_relations","doc":"Serializes *target*'s relations to *io*.","summary":"<p>Serializes <em>target</em>'s relations to <em>io</em>.</p>","abstract":true,"args":[{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""},{"name":"fields_count","doc":null,"default_value":"","external_name":"fields_count","restriction":""},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""},{"name":"includes","doc":null,"default_value":"","external_name":"includes","restriction":""},{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""}],"args_string":"(target, fields_count, io, includes, opts)","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/serializable.cr#L53","def":{"name":"serialize_relations","args":[{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""},{"name":"fields_count","doc":null,"default_value":"","external_name":"fields_count","restriction":""},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""},{"name":"includes","doc":null,"default_value":"","external_name":"includes","restriction":""},{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[{"html_id":"github.com/imdrasil/serializer/Serializer/Serializable/AbstractClassMethods","path":"Serializer/Serializable/AbstractClassMethods.html","kind":"module","full_name":"Serializer::Serializable::AbstractClassMethods","name":"AbstractClassMethods","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"serizlizer/serializable.cr","line_number":8,"url":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/serializable.cr"}],"repository_name":"github.com/imdrasil/serializer","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/imdrasil/serializer/Serializer/Serializable","kind":"class","full_name":"Serializer::Serializable","name":"Serializable"},"doc":"Abstract serializer static methods.","summary":"<p>Abstract serializer static methods.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"meta(_opts)-instance-method","html_id":"meta(_opts)-instance-method","name":"meta","doc":"Returns default meta options.\n\nIf this is empty and no additional meta-options are given - `meta` key is avoided. To define own default meta options\njust override this in your serializer:\n\n```\nclass UserSerializer < Serializer::Base(User)\n  def self.meta(opts)\n    {\n      :status => \"ok\"\n    } of Symbol => Serializer::MetaAny\n  end\nend\n```","summary":"<p>Returns default meta options.</p>","abstract":false,"args":[{"name":"_opts","doc":null,"default_value":"","external_name":"_opts","restriction":""}],"args_string":"(_opts)","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/serializable.cr#L42","def":{"name":"meta","args":[{"name":"_opts","doc":null,"default_value":"","external_name":"_opts","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{} of Symbol => MetaAny"}},{"id":"root_key-instance-method","html_id":"root_key-instance-method","name":"root_key","doc":"Returns json root key.\n\nDefault data root key is `\"data\"`. This behavior can be override by overriding this method.\n\n```\nclass UserSerializer < Serializer::Base(User)\n  def self.root_key\n    \"user\"\n  end\nend\n```","summary":"<p>Returns json root key.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/imdrasil/serializer/blob/74cffb06d74eb2c4693a0f24f63c533911c646b5/src/serizlizer/serializable.cr#L38","def":{"name":"root_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"data\""}}],"macros":[],"types":[]}]}]}]}}